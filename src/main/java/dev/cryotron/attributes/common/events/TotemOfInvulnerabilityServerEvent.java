package dev.cryotron.attributes.common.events;


import dev.cryotron.attributes.CTAttributes;
import dev.cryotron.attributes.networking.InvulnerabilitySync;
import dev.cryotron.attributes.networking.NetworkHandler;
import dev.cryotron.attributes.setup.deferredregistries.RegisteredItems;
import dev.cryotron.attributes.setup.deferredregistries.RegisteredSounds;
import net.minecraft.client.resources.sounds.Sound;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.network.NetworkDirection;

@Mod.EventBusSubscriber(modid = CTAttributes.ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)
public class TotemOfInvulnerabilityServerEvent {

	@SubscribeEvent
	public static void TotemOfInvulnerabilityEvent (LivingDeathEvent event) {
	
		LivingEntity deadEntity = event.getEntity();
		
		if (deadEntity instanceof ServerPlayer player) {
			Item TotemOfInvulnerability = RegisteredItems.TOTEM_OF_INVULNERABILITY.get();
			ItemStack itemMH = player.getMainHandItem();
			ItemStack itemOH = player.getOffhandItem();
			
			if (itemMH.getItem() == TotemOfInvulnerability || itemOH.getItem() == TotemOfInvulnerability) {
				event.setCanceled(true);
				
				deadEntity.setHealth(7f);
                deadEntity.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 1000, 10));
                deadEntity.addEffect(new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE, 1000, 10));
                deadEntity.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 500, 5));
                //deadEntity.getLevel().playSound(player, deadEntity.getX(), deadEntity.getY(), deadEntity.getZ(), RegisteredSounds.INVULNERABILITY_USE.get(), deadEntity.getSoundSource(), 2.0f, 1.0f);
                deadEntity.getLevel().playLocalSound(deadEntity.getX(), deadEntity.getY(), deadEntity.getZ(), RegisteredSounds.INVULNERABILITY_USE.get(), deadEntity.getSoundSource(), 1.0f, 1.0f, false);
                
                Object msg = new InvulnerabilitySync(true);
                NetworkHandler.CHANNEL.sendTo(msg, player.connection.connection, NetworkDirection.PLAY_TO_CLIENT);

                if (itemMH.getItem() == TotemOfInvulnerability) {
                	itemMH.hurtAndBreak(1, player, (_player) -> player.broadcastBreakEvent(player.getUsedItemHand()));
                }
                if (itemOH.getItem() == TotemOfInvulnerability) {
                	itemOH.hurtAndBreak(1, player, (_player) -> player.broadcastBreakEvent(player.getUsedItemHand()));
                }
				
			}
			
		}
	}
	
}

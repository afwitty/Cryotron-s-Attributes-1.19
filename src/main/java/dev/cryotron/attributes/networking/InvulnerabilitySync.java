package dev.cryotron.attributes.networking;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Supplier;

import net.minecraft.network.FriendlyByteBuf;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.fml.DistExecutor;
import net.minecraftforge.network.NetworkEvent;

public class InvulnerabilitySync {
	boolean usedInvulnerability;

	public InvulnerabilitySync(boolean usedInvulnerability)
	{
		this.usedInvulnerability = usedInvulnerability;
	}

	public static void encode(InvulnerabilitySync pkt, FriendlyByteBuf buf)
	{
		buf.writeBoolean(pkt.usedInvulnerability);
	}

	public static InvulnerabilitySync decode(FriendlyByteBuf buf)
	{
		return new InvulnerabilitySync(buf.readBoolean());
	}

	public static boolean handle(final InvulnerabilitySync message, Supplier<NetworkEvent.Context> ctx)
	{
		final var success = new AtomicBoolean(false);
		
		ctx.get().enqueueWork(() -> {
			DistExecutor.unsafeRunWhenOn(Dist.CLIENT,   () -> () -> success.set(ClientAccess.reachPlayerClientInvulnerability(message.usedInvulnerability)
					));
		});

        ctx.get().setPacketHandled(true);
        return success.get();
	}
}


